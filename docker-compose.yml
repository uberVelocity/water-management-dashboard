version: '3'
networks: 
  bridge-network: 
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
    
services:
  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '2181:2181'
    networks: 
      - bridge-network
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always

  kafka:
    container_name: kafka
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - '9092:9092'
    networks: 
      - bridge-network
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    restart: always

  # Kafka Producers (sensors)
  leakagesensor:
    build: sensors/leakagesensor
    networks: 
      - bridge-network
    restart: always
  
  ptsensor:
    build: sensors/ptsensor
    networks: 
      - bridge-network
    restart: always

  qualitysensor:
    build: sensors/qualitysensor
    networks: 
      - bridge-network
    restart: always
  
  # Kafka Consumers
  consumerdb:
    container_name: consumerdb
    build: consumer/consumerdb
    networks: 
      - bridge-network
    restart: always

  # Frontend
  frontend:
    container_name: frontend
    build: frontend/
    networks:
      - bridge-network
    restart: always
    ports:
      - '80:80'

  # Backend serving the Frontend
  backend:
    build: backend/
    networks: 
      - bridge-network
    depends_on:
      - cassandra
    restart: always
    ports:
      - '5001-5003:5001'

  # Backend load balancer
  load-balancer:
    container_name: load-balancer
    build: load-balancer/
    ports:
      - '5000:5000'
    restart: always
    networks:
      - bridge-network

  # Live update socket service
  backend-updates:
    container_name: backend-updates
    networks:
      - bridge-network
    restart: always
    build: backend-updates/
    ports:
      - '5500:5500'

  # Backend responsible for authentication
  backend-auth:
    container_name: backend-auth
    build: backend-auth/
    networks:
      - bridge-network
    depends_on:
      - mongo
    ports: 
      - '4000:4000'
    restart: always

  # Database for storing user information
  mongo:
    build: mongo/
    container_name: mongo
    networks: 
      - bridge-network
    environment:
      - MONGO_INITDB_DATABASE=auth_db
    volumes: 
      - ./mongo/mongodata:/data/db
    ports:
      - '27017-27019:27017-27019'
    restart: always

  cassandra:
    container_name: cassandra
    build: cassandra/
    networks: 
      - bridge-network
    expose:
      - 7000
      - 7001
      - 7199
      - 9042
      - 9160
    restart: always

